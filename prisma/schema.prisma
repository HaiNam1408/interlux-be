generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String   @unique
  phone        String
  password     String
  avatar       String?
  address      String?
  role         Role     @default(USER)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  carts        Cart[]
  orders       Order[]
  notifications Notification[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  sort      Int?
  parentId  Int?
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")
  image     Json?
  status    CommonStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  product Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  slug        String        @unique
  description String?
  price       Float
  percentOff  Int?
  sold        Int           @default(0)
  attributes  Json?
  categoryId  Int
  category    Category      @relation(fields: [categoryId], references: [id])
  images      Json?
  sort        Int?
  status      ProductStatus @default(DRAFT)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  productAttributes ProductAttribute[]
  variations        ProductVariation[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
}

model ProductAttribute {
  id          Int          @id @default(autoincrement())
  productId   Int
  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  name        String
  slug        String
  sort        Int?
  status      CommonStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  values      ProductAttributeValue[]

  @@unique([productId, slug])
}

model ProductAttributeValue {
  id                Int             @id @default(autoincrement())
  attributeId      Int
  attribute        ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  name             String
  slug             String
  value            String?
  sort             Int?
  status           CommonStatus     @default(ACTIVE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  productVariations ProductVariationValue[]

  @@unique([attributeId, slug])
}

model ProductVariation {
  id         Int          @id @default(autoincrement())
  productId  Int
  product    Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku        String       @unique
  price      Float?
  percentOff Int?
  inventory  Int          @default(0)
  images     Json?
  isDefault  Boolean      @default(false)
  status     CommonStatus @default(ACTIVE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  attributeValues   ProductVariationValue[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
}

model ProductVariationValue {
  id                 Int                  @id @default(autoincrement())
  productVariationId Int
  productVariation   ProductVariation     @relation(fields: [productVariationId], references: [id], onDelete: Cascade)
  attributeValueId   Int
  attributeValue     ProductAttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@unique([productVariationId, attributeValueId])
}

model Cart {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model CartItem {
  id                 Int              @id @default(autoincrement())
  cartId             Int
  cart               Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId          Int
  product            Product          @relation(fields: [productId], references: [id])
  productVariationId Int?
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id])
  quantity           Int
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([cartId])
  @@index([productId])
  @@index([productVariationId])
}

model Order {
  id                Int           @id @default(autoincrement())
  orderNumber       String        @unique
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  items             OrderItem[]
  subtotal          Float
  shippingFee       Float         @default(0)
  tax               Float         @default(0)
  discount          Float         @default(0)
  total             Float
  paymentId         Int?
  payment           Payment?      @relation(fields: [paymentId], references: [id])
  shippingId        Int?
  shipping          Shipping?     @relation(fields: [shippingId], references: [id])
  couponId          Int?
  coupon            Coupon?       @relation(fields: [couponId], references: [id])
  status            OrderStatus   @default(PENDING)
  note              String?
  shippingAddress   Json
  billingAddress    Json?
  deliveryDate      DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([userId])
  @@index([paymentId])
  @@index([shippingId])
  @@index([couponId])
}

model OrderItem {
  id                 Int              @id @default(autoincrement())
  orderId            Int
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          Int
  product            Product          @relation(fields: [productId], references: [id])
  productVariationId Int?
  productVariation   ProductVariation? @relation(fields: [productVariationId], references: [id])
  quantity           Int
  price              Float
  discount           Float            @default(0)
  total              Float
  metadata           Json?            // Store product information at the time of order
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([productVariationId])
}

model Payment {
  id                Int             @id @default(autoincrement())
  transactionId     String?         @unique
  amount            Float
  currency          String          @default("VND")
  method            PaymentMethod
  status            PaymentStatus   @default(PENDING)
  metadata          Json?           // Lưu thông tin thanh toán từ cổng thanh toán
  orders            Order[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Shipping {
  id              Int               @id @default(autoincrement())
  name            String            // Tên phương thức vận chuyển
  description     String?
  price           Float
  estimatedDays   Int?              // Thời gian dự kiến giao hàng (số ngày)
  provider        String?           // Nhà cung cấp dịch vụ vận chuyển
  status          CommonStatus      @default(ACTIVE)
  trackingInfo    Json?             // Thông tin theo dõi đơn hàng
  orders          Order[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Coupon {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  type            CouponType
  value           Float
  minPurchase     Float?
  maxUsage        Int?
  usageCount      Int               @default(0)
  startDate       DateTime
  endDate         DateTime
  status          CommonStatus      @default(ACTIVE)
  orders          Order[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  @@map("Coupon")
}

model Notification {
  id              Int                @id @default(autoincrement())
  userId          Int
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  title           String
  content         String
  type            NotificationType   @default(SYSTEM)
  relatedId       Int?
  relatedType     String?
  isRead          Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@index([userId])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OUTOFSTOCK
}

enum CommonStatus {
  ACTIVE
  INACTIVE
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  MOMO
  VNPAY
  PAYPAL
  COD
  OTHER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum NotificationType {
  SYSTEM
  ORDER
  PAYMENT
  SHIPPING
  PROMOTION
  PRODUCT
  OTHER
}